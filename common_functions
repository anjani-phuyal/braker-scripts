#! /usr/bin/env bash
#
# Description: common_functions
# Author: Steve Stonebraker
# use:
# readonly ourPath="$(dirname $0)"
# readonly commonFunctions="$ourPath/common_functions"
# if [ -e "$commonFunctions" ]; then
#   source "$commonFunctions"
# else
#   echo "common_functions not found"
# fi
#
#

########################################
function print_status ()
{
    echo -e "\x1B[01;34m[*]\x1B[0m $1"
}

function print_good ()
{
    echo -e "\x1B[01;32m[*]\x1B[0m $1"
}

function print_error ()
{
    echo -e "\x1B[01;31m[*]\x1B[0m $1"
}

function print_notification ()
{
  echo -e "\x1B[01;33m[*]\x1B[0m $1"
}
########################################    

#######################################
function checkProgramIsInEnvironment
{
  if [ ! -x "$(which $1)" ]; then
    print_status "installing package ${1}"
      apt-get install -y ${1}
      if [ $? -eq 0 ]; then
        print_good "Packages successfully installed."
      else
        print_error "Packages failed to install!"
        exit 1
    fi
  else
    print_status "package ${1} present"
  fi
}
########################################
function install_packages()
{
programs=(s3cmd ipset)
  for program in "${programs[@]}"; do
    checkProgramIsInEnvironment "$program"
  done
}
########################################
function shredFile
{
if [ -f "$1" ]; then
  print_status "Shredding ${1}"
  shred -u ${1}
  if [ $? -eq 0 ]; then
     print_good "${1} shredded"
  else
      print_error "${1} failed to shred!"
  
  fi
 else
  print_error "Unable to shred ${1}, file does not exist!"
 fi
}
########################################
function replaceText
{
sed -i "s|${1}|${2}|g" "${3}"
}
########################################
listcontains() {
    for word in $1; do
		[[ $word = $2 ]] && return 0
	done
	return 1
}
########################################
listcontains_SampleUsage () {
#FIND OUT fruit TYPE
#Define list of valid Fruits
list="apple orange grape pineapple"
#Loop until user provides valid value in list
    while true; do
		print_status "Determine fruit"
		print_notification "Please enter one of these fruits \nValid Responses: [apple, orange, grape, pineapple]"
		read -p "fruit type: " FRUIT_TYPE
		echo ""
		#Check if user's response matches our list of fruit types
		if listcontains "$list" ${FRUIT_TYPE}; then
			print_good "Valid fruit Choice: ${FRUIT_TYPE}"
			export FRUIT_TYPE
			echo "do something else in the code here if you want"
			break
		else
			print_error "Invalid fruit Type.  Please try again."
			continue
		fi
	done
    return 0
}
########################################
restart_service_mem_ge_x () {
        #
        # Description:Restart service if memory usage is greater than x
        # usage: restart_service_mem_ge_x process_name max_size
        #
        # Example: restart_service_mem_ge_x httpd 1024  (restart httpd if using more than 1024MB of memory
        process_name=$1
        max_size=$2
        start_service_command="$3"

        actual_size=$( /bin/ps aux | /usr/bin/awk "/$process_name/"'{total+=$6}END{print total/1024}' |  /usr/bin/awk '{printf "%.0f\n", $1}' )

        if [ $actual_size -ge $max_size ] ; then
                /bin/echo "${process_name} is currently using ${actual_size}MB, which is greater than or equal to ${max_size}MB"
                /usr/bin/pkill ${process_name}
                $start_service_command
        else
                /bin/echo "${process_name} is currently using ${actual_size}MB, which is less than ${max_size}MB maximum value"
        fi

}
########################################