#! /usr/bin/env bash
#
# Description: common_functions
# Author: Steve Stonebraker
# useage:
# readonly ourPath="$(dirname $0)"
# readonly commonFunctions="$ourPath/common_functions"
# if [ ! -e "$commonFunctions" ]; then
#       echo "common_functions not found... downloading"
#         cd $ourPath
#         curl -s -O  "https://raw.github.com/ssstonebraker/braker-scripts/master/common_functions"
# fi
# 
# if [ -e "$commonFunctions" ]; then
#         source "$commonFunctions"
#         print_good "loaded commonFunctions file"
# else
#         echo "common_functions not found... exiting"
#         exit 1;
# fi

########################################
function print_status ()
{
    echo -e "\x1B[01;34m[*]\x1B[0m $1"
}

function print_good ()
{
    echo -e "\x1B[01;32m[*]\x1B[0m $1"
}

function print_error ()
{
    echo -e "\x1B[01;31m[*]\x1B[0m $1"
}

function print_notification ()
{
  echo -e "\x1B[01;33m[*]\x1B[0m $1"
}
########################################    
function install_packages()
{
 apt-get update &>> $logfile && apt-get install -y ${@} &>> $logfile
 if [ $? -eq 0 ]; then
  print_good "Packages successfully installed."
 else
  print_error "Packages failed to install!"
  exit 1
 fi
}
########################################    
function proceed_if_root()
{
#Make sure only root can run our script
        if [[ $EUID -ne 0 ]]; then
           print_error "This script must be run as root" 1>&2
           exit 1
        fi
}
########################################
#Check for proper ubuntu version
function check_if_ubuntu_12()
{
print_status "OS Version Check."
release=`lsb_release -r|awk '{print $2}'`
     if [ $release = "12.04" -o $release = "12.10" -o "13.04" ]
          then
                           print_good "OS is Ubuntu. Good to go."

          else
               print_notification "This is not Ubuntu 12.04 or 12.10, and has NOT been tested on other platforms."
               while true; do
                   read -p "Continue? (y/n)" warncheck
                   case $warncheck in
                       [Yy]* ) break;;
                       [Nn]* ) print_error "Bailing."; exit;;
                       * ) print_notification "Please answer yes or no.";;
                   esac
                                done
                echo " "
     fi
}
########################################

function install_mod_security()
{
# Build modsecurity and install in the current directory
# usage: install_mod_security "2.7.4"
build=`pwd`

cd $build
version_modsec=$1
partial_path_modsec="modsecurity-apache_$version_modsec"
curl -s -O https://www.modsecurity.org/tarball/$version_modsec/$partial_path_modsec.tar.gz
curl -s -O https://www.modsecurity.org/tarball/$version_modsec/$partial_path_modsec.tar.gz.sha256
sha256sum -c $partial_path_modsec.tar.gz.sha256
 if [ $? -eq 0 ]; then
                    print_good "Valid hash for modsec, proceeding...."
                else
                    print_error "Invalid hash!"
                    exit $?
 fi
tar -xzf $partial_path_modsec.tar.gz
cd $partial_path_modsec/

./configure
 print_notification "Does the configuration look okay? Do you want to proceed? (note, this is good:  is linked with gnutls... no)"
               while true; do
                   read -p "Continue? (y/n)" warncheck
                   case $warncheck in
                       [Yy]* ) break;;
                       [Nn]* ) print_error "Bailing."; exit;;
                       * ) print_notification "Please answer yes or no.";;
                   esac
                                done
                echo " "


make
make install
}
#######################################
function checkProgramIsInEnvironment
{
  if [ ! -x "$(which $1)" ]; then
    print_status "installing package ${1}"
      apt-get install -y ${1}
      if [ $? -eq 0 ]; then
        print_good "Packages successfully installed."
      else
        print_error "Packages failed to install!"
        exit 1
    fi
  else
    print_status "package ${1} present"
  fi
}
########################################
function install_packages()
{
programs=(s3cmd ipset)
  for program in "${programs[@]}"; do
    checkProgramIsInEnvironment "$program"
  done
}
########################################
function shredFile
{
if [ -f "$1" ]; then
  print_status "Shredding ${1}"
  shred -u ${1}
  if [ $? -eq 0 ]; then
     print_good "${1} shredded"
  else
      print_error "${1} failed to shred!"
  
  fi
 else
  print_error "Unable to shred ${1}, file does not exist!"
 fi
}
########################################
function replaceText
{
sed -i "s|${1}|${2}|g" "${3}"
}
########################################
listcontains() {
    for word in $1; do
		[[ $word = $2 ]] && return 0
	done
	return 1
}
########################################
listcontains_SampleUsage () {
#FIND OUT fruit TYPE
#Define list of valid Fruits
list="apple orange grape pineapple"
#Loop until user provides valid value in list
    while true; do
		print_status "Determine fruit"
		print_notification "Please enter one of these fruits \nValid Responses: [apple, orange, grape, pineapple]"
		read -p "fruit type: " FRUIT_TYPE
		echo ""
		#Check if user's response matches our list of fruit types
		if listcontains "$list" ${FRUIT_TYPE}; then
			print_good "Valid fruit Choice: ${FRUIT_TYPE}"
			export FRUIT_TYPE
			echo "do something else in the code here if you want"
			break
		else
			print_error "Invalid fruit Type.  Please try again."
			continue
		fi
	done
    return 0
}
########################################
restart_service_mem_ge_x () {
        #
        # Description:Restart service if memory usage is greater than x
        # usage: restart_service_mem_ge_x process_name max_size
        #
        # Example: restart_service_mem_ge_x httpd 1024  (restart httpd if using more than 1024MB of memory
        process_name=$1
        max_size=$2
        start_service_command="$3"

        actual_size=$( /bin/ps aux | /usr/bin/awk "/$process_name/"'{total+=$6}END{print total/1024}' |  /usr/bin/awk '{printf "%.0f\n", $1}' )

        if [ $actual_size -ge $max_size ] ; then
                /bin/echo "${process_name} is currently using ${actual_size}MB, which is greater than or equal to ${max_size}MB"
                /usr/bin/pkill ${process_name}
                $start_service_command
        else
                /bin/echo "${process_name} is currently using ${actual_size}MB, which is less than ${max_size}MB maximum value"
        fi

}
########################################
########################################
kill_process_with_name () {
  #!/bin/sh

if [[ $1 -eq "" ]]; then
    echo "Usage: pkill.sh <process name>"
    exit
fi

for id in `ps -axcopid,command | grep -i -e $1 | awk '{ print $1 }'`; do
  kill -9 $id
done
}
########################################
# grep for a process
function psg {
  FIRST=`echo $1 | sed -e 's/^\(.\).*/\1/'` 
  REST=`echo $1 | sed -e 's/^.\(.*\)/\1/'`
  ps aux | grep "[$FIRST]$REST"
}
########################################
kill_zombie_processes () {
        /bin/ps -elf | /usr/bin/awk '{print $2 " " $5}' | /bin/grep -w Z | /usr/bin/awk '{print $2}' | xargs kill -9
}
########################################
function system_update_hostname {
    # system_update_hostname(system hostname)
    if [ -z "$1" ]; then
        echo "system_update_hostname() requires the system hostname as its first argument"
        return 1;
    fi
    echo $1 > /etc/hostname
    hostname -F /etc/hostname
    sed -i -e "s/^127\.0\.1\.1\s.*$/$$1/" /etc/hosts
    /etc/init.d/hostname restart
}
function system_primary_ip {
  # returns the primary IP assigned to eth0
  echo $(ifconfig eth0 | awk -F: '/inet addr:/ {print $2}' | awk '{ print $1 }')
}

function lower {
    # helper function
    echo $1 | tr '[:upper:]' '[:lower:]'
}


function system_add_user {
    # system_add_user(username, password, groups, shell=/bin/bash)
    USERNAME=`lower $1`
    PASSWORD=$2
    SUDO_GROUP=$3
    SHELL=$4
    if [ -z "$4" ]; then
        SHELL="/bin/bash"
    fi
    useradd --create-home --shell "$SHELL" --user-group --groups "$SUDO_GROUP" "$USERNAME"
    echo "$USERNAME:$PASSWORD" | chpasswd
}

function system_add_system_user {
    # system_add_system_user(username, home, shell=/bin/bash)
    USERNAME=`lower $1`
    HOME_DIR=$2
    SHELL=$3
    if [ -z "$3" ]; then
        SHELL="/bin/bash"
    fi
    useradd --system --create-home --home-dir "$HOME_DIR" --shell "$SHELL" --user-group $USERNAME
}

function system_lock_user {
    # system_lock_user(username)
    passwd -l "$1"
}

function system_get_user_home {
    # system_get_user_home(username)
    cat /etc/passwd | grep "^$1:" | cut --delimiter=":" -f6
}

function system_user_add_ssh_key {
    # system_user_add_ssh_key(username, ssh_key)
    USERNAME=`lower $1`
    USER_HOME=`system_get_user_home "$USERNAME"`
    sudo -u "$USERNAME" mkdir "$USER_HOME/.ssh"
    sudo -u "$USERNAME" touch "$USER_HOME/.ssh/authorized_keys"
    sudo -u "$USERNAME" echo "$2" >> "$USER_HOME/.ssh/authorized_keys"
    chmod 0600 "$USER_HOME/.ssh/authorized_keys"
}

function system_sshd_edit_bool {
    # system_sshd_edit_bool (param_name, "Yes"|"No")
    VALUE=`lower $2`
    if [ "$VALUE" == "yes" ] || [ "$VALUE" == "no" ]; then
        sed -i "s/^#*\($1\).*/\1 $VALUE/" /etc/ssh/sshd_config
    fi
}

function system_sshd_permitrootlogin {
    system_sshd_edit_bool "PermitRootLogin" "$1"
}

function system_sshd_passwordauthentication {
    system_sshd_edit_bool "PasswordAuthentication" "$1"
}


function system_get_codename {
    echo `lsb_release -sc`
}

function system_get_release {
    echo `lsb_release -sr`
}

function system_sshd_pubkeyauthentication {
    system_sshd_edit_bool "PubkeyAuthentication" "$1"
}

function system_update_locale_en_US_UTF_8 {
    # locale-gen en_US.UTF-8
    dpkg-reconfigure locales
    update-locale LANG=en_US.UTF-8
}

function restart_services {
    # restarts upstart services that have a file in /tmp/needs-restart/
    for service_name in $(ls /tmp/ | grep restart-* | cut -d- -f2-10); do
        service $service_name restart
        rm -f /tmp/restart-$service_name
    done
}

function restart_initd_services {
    # restarts upstart services that have a file in /tmp/needs-restart/
    for service_name in $(ls /tmp/ | grep restart_initd-* | cut -d- -f2-10); do
        /etc/init.d/$service_name restart
        rm -f /tmp/restart_initd-$service_name
    done
}